// <auto-generated />
using System;
using Coboss.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Coboss.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231205213201_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Coboss.Core.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("ParentID")
                        .HasColumnType("uuid");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("TableName", "ParentID")
                        .IsUnique();

                    b.ToTable("Attachments", "coboss");
                });

            modelBuilder.Entity("Coboss.Core.Entities.BusinnessTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2023, 12, 5, 21, 32, 1, 883, DateTimeKind.Utc).AddTicks(9094));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Term")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2023, 12, 5, 21, 32, 1, 883, DateTimeKind.Utc).AddTicks(9268));

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("BusinnessTasks", "coboss");
                });

            modelBuilder.Entity("Coboss.Core.Entities.BusinnessTaskComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusinnessTaskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2023, 12, 5, 21, 32, 1, 883, DateTimeKind.Utc).AddTicks(7688));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BusinnessTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("BusinnessTaskComments", "coboss");
                });

            modelBuilder.Entity("Coboss.Core.Entities.BusinnessTaskRealisation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusinnessTaskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2023, 12, 5, 21, 32, 1, 884, DateTimeKind.Utc).AddTicks(2210));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("TimeSpan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("interval")
                        .HasDefaultValue(new TimeSpan(0, 0, 0, 0, 0));

                    b.HasKey("Id");

                    b.HasIndex("BusinnessTaskId");

                    b.ToTable("BusinnessTaskRealisations", "coboss");
                });

            modelBuilder.Entity("Coboss.Core.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("NIP")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PESEL")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("NIP")
                        .IsUnique();

                    b.HasIndex("PESEL")
                        .IsUnique();

                    b.ToTable("Employers", "coboss");
                });

            modelBuilder.Entity("Coboss.Core.Entities.EmployeeHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CostHourOfWork")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("DateTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999));

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeHistories", "coboss");
                });

            modelBuilder.Entity("Coboss.Core.Entities.GlobalSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("GlobalSettings", "coboss");
                });

            modelBuilder.Entity("Coboss.Core.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Term")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2023, 12, 5, 21, 32, 1, 884, DateTimeKind.Utc).AddTicks(7541));

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Projects", "coboss");
                });

            modelBuilder.Entity("Coboss.Core.Entities.RefreshTokenData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2023, 12, 5, 21, 32, 1, 884, DateTimeKind.Utc).AddTicks(8929));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(88)
                        .HasColumnType("character varying(88)");

                    b.Property<bool>("Used")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokensData", "coboss");
                });

            modelBuilder.Entity("Coboss.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", "coboss");
                });

            modelBuilder.Entity("Coboss.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users", "coboss");
                });

            modelBuilder.Entity("Coboss.Core.Entities.BusinnessTask", b =>
                {
                    b.HasOne("Coboss.Core.Entities.Project", null)
                        .WithMany("BusinnessTasks")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Coboss.Core.Entities.BusinnessTaskComment", b =>
                {
                    b.HasOne("Coboss.Core.Entities.BusinnessTask", null)
                        .WithMany("Comments")
                        .HasForeignKey("BusinnessTaskId");

                    b.HasOne("Coboss.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Coboss.Core.Entities.BusinnessTaskRealisation", b =>
                {
                    b.HasOne("Coboss.Core.Entities.BusinnessTask", null)
                        .WithMany("TaskRealisations")
                        .HasForeignKey("BusinnessTaskId");
                });

            modelBuilder.Entity("Coboss.Core.Entities.EmployeeHistory", b =>
                {
                    b.HasOne("Coboss.Core.Entities.Employee", "Employee")
                        .WithMany("EmployeeHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Coboss.Core.Entities.Project", b =>
                {
                    b.HasOne("Coboss.Core.Entities.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Coboss.Core.Entities.RefreshTokenData", b =>
                {
                    b.HasOne("Coboss.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Coboss.Core.Entities.User", b =>
                {
                    b.HasOne("Coboss.Core.Entities.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("Coboss.Core.Entities.User", "EmployeeId");

                    b.HasOne("Coboss.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Coboss.Core.Entities.BusinnessTask", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TaskRealisations");
                });

            modelBuilder.Entity("Coboss.Core.Entities.Employee", b =>
                {
                    b.Navigation("EmployeeHistories");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Coboss.Core.Entities.Project", b =>
                {
                    b.Navigation("BusinnessTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
